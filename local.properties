## This file must *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
#Mon Sep 13 15:21:26 MSK 2021
private=val fragmentCallbacks \= object\: FragmentManager.FragmentLifecycleCallbacks(){
supportActionBar?.title=f.getScreenTitle()
notifyScreenUpdates()=
import=com.example.hhapitest.views.base.BaseFragment
super.onCreate(savedInstanceState)=
*/=
fm=FragmentManager,
super.onPause()=
binding=ActivityMainBinding.inflate(layoutInflater)// binding 2
//private=val actions \= mutableListOf<() -> Unit>()
//actions.forEach={ it() }
savedInstanceState=Bundle?
super.onResume()=
sdk.dir=C\:\\Users\\UNIX\\AppData\\Local\\Android\\Sdk
else=supportActionBar?.title \= getString(R.string.app_name)
setSupportActionBar(toolbar)=
lateinit=var binding\: ActivityMainBinding// binding 1
supportFragmentManager.unregisterFragmentLifecycleCallbacks(fragmentCallbacks)=
override=fun onFragmentViewCreated(
/*=
if=(f is BaseFragment){
class=MainActivity \: AppCompatActivity() {
supportFragmentManager.registerFragmentLifecycleCallbacks(fragmentCallbacks,=false)
mainViewModel.whenActivityActive.resource=null
val=result \= mainViewModel.result.value?.getValue() \:? return
//=activity is not active -> add action to queue
package=com.example.hhapitest
//actions.clear()=
f=Fragment,
)={
setContentView(binding.root)//=binding 3
v=View,
super.onDestroy()=
mainViewModel.launchFragment(this,=)
}=
actions=+\= action
fun=notifyScreenUpdates(){
action()=
